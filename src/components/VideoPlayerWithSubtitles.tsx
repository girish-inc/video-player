import React, { useState, useEffect, useRef } from 'react';
import {
  StyleSheet,
  View,
  Text,
  ActivityIndicator,
  Dimensions,
  TouchableOpacity,
  Platform,
} from 'react-native';
import { Video, AVPlaybackStatus, ResizeMode } from 'expo-av';
import * as FileSystem from 'expo-file-system';
import { parseAssFile, getActiveDialogues, generateStyleFromAss } from '../utils/assParser';

// Sample video and subtitle URLs
const VIDEO_URL = 'https://drive.google.com/uc?export=download&id=1kXty9ja6Cpe3Iuq3BuIo1cKoXcBJXdXf';
const SUBTITLE_URL = 'https://drive.google.com/uc?export=download&id=1kXty9ja6Cpe3Iuq3BuIo1cKoXcBJXdXf';

const { width: SCREEN_WIDTH } = Dimensions.get('window');

const VideoPlayerWithSubtitles: React.FC = () => {
  const videoRef = useRef<Video>(null);
  const [status, setStatus] = useState<AVPlaybackStatus | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [subtitleContent, setSubtitleContent] = useState<string>('');
  const [parsedSubtitles, setParsedSubtitles] = useState<any>(null);
  const [activeSubtitles, setActiveSubtitles] = useState<any[]>([]);
  const [videoWidth, setVideoWidth] = useState<number>(SCREEN_WIDTH);
  const [videoHeight, setVideoHeight] = useState<number>(SCREEN_WIDTH * 9 / 16); // 16:9 aspect ratio

  // Load subtitle file
  useEffect(() => {
    const loadSubtitles = async () => {
      try {
        // For demo purposes, we'll use a hardcoded subtitle content
        // In a real app, you would fetch this from SUBTITLE_URL
        const subtitleContent = `[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: Top,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,8,10,10,10,1
Style: Mid,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,5,10,10,10,1
Style: Bottom,Arial,24,&H0000FFFF,&H000000FF,&H00000000,&H00000000,1,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.00,0:00:04.00,Top,,0,0,0,,This is a top-aligned subtitle with default styling
Dialogue: 0,0:00:04.50,0:00:08.00,Mid,,0,0,0,,This is a middle-aligned subtitle\NWith multiple lines
Dialogue: 0,0:00:08.50,0:00:12.00,Bottom,,0,0,0,,This is a {\\b1}bold{\\b0} and {\\i1}italic{\\i0} styled subtitle
Dialogue: 0,0:00:12.50,0:00:16.00,Default,,0,0,0,,This subtitle has {\\c&H0000FF&}colored{\\c&HFFFFFF&} text
Dialogue: 0,0:00:16.50,0:00:20.00,Default,,0,0,0,,This subtitle has {\\fs30}different{\\fs20} font sizes
Dialogue: 0,0:00:20.50,0:00:24.00,Default,,0,0,0,,{\\pos(100,50)}This subtitle has custom positioning
Dialogue: 0,0:00:24.50,0:00:28.00,Default,,0,0,0,,This is a normal subtitle again
`;
        
        setSubtitleContent(subtitleContent);
        const parsed = parseAssFile(subtitleContent);
        setParsedSubtitles(parsed);
      } catch (err) {
        console.error('Failed to load subtitles:', err);
        setError('Failed to load subtitles');
      }
    };

    loadSubtitles();
  }, []);

  // Update active subtitles based on current playback position
  useEffect(() => {
    if (!status?.isLoaded || !parsedSubtitles) return;

    const currentTime = status.positionMillis;
    const active = getActiveDialogues(parsedSubtitles, currentTime);
    setActiveSubtitles(active);
  }, [status?.positionMillis, parsedSubtitles]);

  // Handle playback status updates
  const onPlaybackStatusUpdate = (status: AVPlaybackStatus) => {
    setStatus(status);
    if (status.isLoaded && loading) {
      setLoading(false);
    }
  };

  // Handle video load
  const onLoad = (status: AVPlaybackStatus) => {
    if (status.isLoaded) {
      // Update video dimensions based on natural size if available
      if (status.naturalSize) {
        const { width, height } = status.naturalSize;
        const aspectRatio = width / height;
        const calculatedHeight = SCREEN_WIDTH / aspectRatio;
        setVideoHeight(calculatedHeight);
      }
    }
  };

  // Handle video errors
  const onError = (error: string) => {
    console.error('Video playback error:', error);
    setError('Failed to load video');
    setLoading(false);
  };

  // Render subtitles
  const renderSubtitles = () => {
    if (!activeSubtitles.length) return null;

    return activeSubtitles.map((dialogue, index) => {
      const { textStyle, position } = generateStyleFromAss(parsedSubtitles, dialogue);
      
      return (
        <View 
          key={`${dialogue.start}-${dialogue.end}-${index}`}
          style={[styles.subtitleContainer, position]}
        >
          <Text style={[styles.subtitleText, textStyle]}>
            {dialogue.parsedText}
          </Text>
        </View>
      );
    });
  };

  // Render video controls
  const renderControls = () => {
    if (!status?.isLoaded) return null;

    return (
      <View style={styles.controls}>
        <TouchableOpacity 
          style={styles.controlButton}
          onPress={() => {
            if (videoRef.current) {
              if (status.isPlaying) {
                videoRef.current.pauseAsync();
              } else {
                videoRef.current.playAsync();
              }
            }
          }}
        >
          <Text style={styles.controlText}>
            {status.isPlaying ? 'Pause' : 'Play'}
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      {error ? (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
        </View>
      ) : (
        <View style={styles.videoWrapper}>
          <Video
            ref={videoRef}
            style={{
              width: videoWidth,
              height: videoHeight,
            }}
            source={{
              uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4', // Sample video from Expo
            }}
            resizeMode={ResizeMode.CONTAIN}
            shouldPlay={false}
            isLooping
            onPlaybackStatusUpdate={onPlaybackStatusUpdate}
            onLoad={onLoad}
            onError={() => onError('Video failed to load')}
            useNativeControls={Platform.OS !== 'web'} // Use native controls on mobile
          />
          
          {/* Subtitle overlay */}
          <View style={[styles.subtitleOverlay, { width: videoWidth, height: videoHeight }]}>
            {renderSubtitles()}
          </View>
          
          {/* Custom controls for web */}
          {Platform.OS === 'web' && renderControls()}
          
          {loading && (
            <View style={[styles.loaderContainer, { width: videoWidth, height: videoHeight }]}>
              <ActivityIndicator size="large" color="#ffffff" />
            </View>
          )}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    justifyContent: 'center',
    alignItems: 'center',
  },
  videoWrapper: {
    position: 'relative',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#000',
    overflow: 'hidden',
  },
  subtitleOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 10,
    backgroundColor: 'transparent',
  },
  subtitleContainer: {
    position: 'absolute',
    left: 0,
    right: 0,
    padding: 5,
    alignItems: 'center',
  },
  subtitleText: {
    color: '#ffffff',
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.8)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 2,
  },
  loaderContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    zIndex: 20,
  },
  errorContainer: {
    padding: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: 10,
  },
  errorText: {
    color: '#ff0000',
    fontSize: 16,
    textAlign: 'center',
  },
  controls: {
    position: 'absolute',
    bottom: 20,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'center',
    zIndex: 30,
  },
  controlButton: {
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 5,
    marginHorizontal: 5,
  },
  controlText: {
    color: '#ffffff',
    fontSize: 16,
  },
});

export default VideoPlayerWithSubtitles;